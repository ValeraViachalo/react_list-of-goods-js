{"version":3,"sources":["App.jsx","index.jsx"],"names":["SORT_FIELD","goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","reverseField","preparedGoods","sort","element1","element2","localeCompare","reverse","getPreparedGoods","handleSort","field","className","onClick","type","cn","prevIsReversed","map","element","ReactDOM","render","document","getElementById"],"mappings":"iPAMMA,EACM,OADNA,EAEI,SAFJA,EAGE,OAGKC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA4BK,IAAMC,EAAM,WACjB,MAAkCC,mBAASH,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA5BR,SAA0BC,EAA1B,GAA+D,IAA5BL,EAA2B,EAA3BA,UAAWM,EAAgB,EAAhBA,aACtCC,EAAa,YAAOF,GAqB1B,OAnBIL,GACFO,EAAcC,MAAK,SAACC,EAAUC,GAC5B,OAAQV,GACN,KAAKJ,EACH,OAAOa,EAAST,GAAaU,EAASV,GAExC,KAAKJ,EACH,OAAOa,EAASE,cAAcD,GAEhC,QACE,OAAO,MAKXJ,GACFC,EAAcK,UAGTL,EAMcM,CAAiBhB,EACpC,CAAEG,YAAWM,aAAcJ,IAEvBY,EAAa,SAAAC,GAAK,OAAI,kBAAMd,EAAac,KAO/C,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAASH,EAAWlB,GACpBsB,KAAK,SACLF,UAAWG,IAAG,iBACZ,CAAE,WAAYnB,IAAcJ,IAJhC,iCASA,wBACEqB,QAASH,EAAWlB,GACpBsB,KAAK,SACLF,UAAWG,IAAG,oBACZ,CAAE,WAAYnB,IAAcJ,IAJhC,4BASA,wBACEqB,QA5Bc,kBAAMd,GAAc,SAAAiB,GAAc,OAAKA,MA6BrDF,KAAK,SACLF,UAAWG,IAAG,oBACZ,CAAE,YAAajB,IAJnB,sBAUGF,GAAaE,IACZ,wBACEe,QAtCQ,WAClBd,GAAc,GACdF,EAAaL,IAqCHsB,KAAK,SACLF,UAAU,4BAHZ,sBAWN,6BACGZ,EAAaiB,KAAI,SAAAC,GAAO,OACvB,oBAAI,UAAQ,OAAZ,SAAoBA,aCzG9BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.054f1ade.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { useState } from 'react';\n\nconst SORT_FIELD = {\n  ALPHABET: 'name',\n  LENGTH: 'length',\n  NONE: 'none',\n};\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(goods, { sortField, reverseField }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((element1, element2) => {\n      switch (sortField) {\n        case SORT_FIELD.LENGTH:\n          return element1[sortField] - element2[sortField];\n\n        case SORT_FIELD.ALPHABET:\n          return element1.localeCompare(element2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SORT_FIELD.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, reverseField: isReversed });\n\n  const handleSort = field => () => setSortField(field);\n  const handleReverse = () => setIsReversed(prevIsReversed => !prevIsReversed);\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortField(SORT_FIELD.NONE);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={handleSort(SORT_FIELD.ALPHABET)}\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SORT_FIELD.ALPHABET })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={handleSort(SORT_FIELD.LENGTH)}\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortField !== SORT_FIELD.LENGTH })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={handleReverse}\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': !isReversed })}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortField || isReversed) && (\n            <button\n              onClick={handleReset}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {visibleGoods.map(element => (\n          <li data-cy=\"Good\">{element}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}